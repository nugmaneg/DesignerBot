import {Category, Geo, Template} from "@prisma/client";
import { Markup } from "telegraf";
import { geoDisplayNames } from "../../../ui/enums/geo.ui";
import { categoryDisplayNames } from "../../../ui/enums/category.ui";
import { InlineKeyboardButton } from "telegraf/types";

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã.
 * @param geos - –º–∞—Å—Å–∏–≤ enum Geo (–Ω–∞–ø—Ä–∏–º–µ—Ä, ['RU', 'MD', ...])
 * @returns InlineKeyboardMarkup –¥–ª—è Telegram
 */
export function getGeoInlineKeyboard(geos: Geo[]) {
    return Markup.inlineKeyboard(
        geos.map((geo) => [
            Markup.button.callback(
                geoDisplayNames[geo],
                `choose_geo:${geo}`
            )
        ])
    );
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏) + –∫–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ"
 * @param categories - –º–∞—Å—Å–∏–≤ enum Category
 * @returns InlineKeyboardMarkup –¥–ª—è Telegram
 */
export function getCategoryInlineKeyboard(categories: Category[]) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ
    const categoryRows: InlineKeyboardButton[][] = [];
    for (let i = 0; i < categories.length; i += 2) {
        const row: InlineKeyboardButton[] = [
            Markup.button.callback(
                categoryDisplayNames[categories[i]],
                `choose_category:${categories[i]}`
            )
        ];
        if (categories[i + 1]) {
            row.push(
                Markup.button.callback(
                    categoryDisplayNames[categories[i + 1]],
                    `choose_category:${categories[i + 1]}`
                )
            );
        }
        categoryRows.push(row);
    }

    // –ö–Ω–æ–ø–∫–∞ "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ" –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    categoryRows.push([
        Markup.button.callback('üëÅÔ∏è‚Äçüó®Ô∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ', 'choose_category:all')
    ]);

    return Markup.inlineKeyboard(categoryRows);
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ (2 –∫–æ–ª–æ–Ω–∫–∏) + –ø–∞–≥–∏–Ω–∞—Ü–∏—è.
 *
 * @param templates - —à–∞–±–ª–æ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * @param page - –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
 * @param totalPages - –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
 */
export function getTemplateInlineKeyboard(
    templates: Template[],
    page: number,
    totalPages: number
) {
    const buttons: InlineKeyboardButton[][] = [];

    // –ö–Ω–æ–ø–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ (–¥–≤–µ –≤ —Å—Ç—Ä–æ–∫–µ)
    for (let i = 0; i < templates.length; i += 2) {
        const row: InlineKeyboardButton[] = [
            Markup.button.callback(
                templates[i].title,
                `choose_template:${templates[i].id}`
            )
        ];
        if (templates[i + 1]) {
            row.push(
                Markup.button.callback(
                    templates[i + 1].title,
                    `choose_template:${templates[i + 1].id}`
                )
            );
        }
        buttons.push(row);
    }

    // –ü–∞–≥–∏–Ω–∞—Ü–∏—è (–µ—Å–ª–∏ –±–æ–ª–µ–µ 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
    if (totalPages > 1) {
        const navRow: InlineKeyboardButton[] = [];
        if (page > 1) navRow.push(Markup.button.callback("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", `templates_page:${page - 1}`));
        navRow.push(Markup.button.callback(`–°—Ç—Ä. ${page}/${totalPages}`, "noop"));
        if (page < totalPages) navRow.push(Markup.button.callback("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", `templates_page:${page + 1}`));
        buttons.push(navRow);
    }

    return Markup.inlineKeyboard(buttons);
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–∞–ª–µ—Ä–µ–∏ —à–∞–±–ª–æ–Ω–æ–≤ (–æ–¥–∏–Ω —à–∞–±–ª–æ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω)
 * @param index - —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å (1-based)
 * @param total - –≤—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤
 * @param templateId - id —Ç–µ–∫—É—â–µ–≥–æ —à–∞–±–ª–æ–Ω–∞
 */
export function getGalleryKeyboard(index: number, total: number, templateId: string) {
    const buttons: InlineKeyboardButton[] = [];

    if (index > 1)
        buttons.push(Markup.button.callback('‚¨ÖÔ∏è', `templates_page:${index - 1}`));
    buttons.push(Markup.button.callback('‚úÖ –í—ã–±—Ä–∞—Ç—å', `choose_template:${templateId}`));
    if (index < total)
        buttons.push(Markup.button.callback('‚û°Ô∏è', `templates_page:${index + 1}`));
    buttons.push(Markup.button.callback('üîô –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', 'back_to_categories'));

    return Markup.inlineKeyboard([buttons]);
}